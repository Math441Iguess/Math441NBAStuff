function nba()

%% Import the data

[~, ~, raw] = xlsread('/Users/owner/Math441NBAStuff/RESET COMP.xlsx','Use this as Ind. Data');

raw = raw(:,[3,6:end]);

raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};


%% Exclude rows with non-numeric cells

I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),2); % Find rows with non-numeric cells

raw(I,:) = [];



%% Create output variable

data = reshape([raw{:}],size(raw));

%% Allocate imported array to column variable names

Salary = data(:,1);

MINUTES = data(:,2);

FGM = data(:,3);

FGA = data(:,4);

TPM = data(:,5);

TPA = data(:,6);

FTM = data(:,7);

FTA = data(:,8);

TOV = data(:,9);

PF = data(:,10);

ORB = data(:,11);

DRB = data(:,12);

TRB = data(:,13);

AST = data(:,14);

STL = data(:,15);

BLK = data(:,16);

PTS = data(:,17);

TS = data(:,18);

PACE = data(:,19);

%% Clear temporary variables

clearvars data raw I;

%% Import data from spreadsheet

% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/jonesyli/Desktop/RESET COMP.xlsx
%    Worksheet: Sheet1
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.


% Auto-generated by MATLAB on 2018/11/21 11:34:25

%% Import the data

[~, ~, raw] = xlsread('/Users/owner/Math441NBAStuff/RESET COMP.xlsx','Sheet1');

raw = raw(195,3:end);

raw = sortrows(raw,3);

%% Create output variable

data = reshape([raw{:}],size(raw));


%% Allocate imported array to column variable names

TEAMMIN = data(:,1);

TEAMFGM = data(:,2);

TEAMFGA = data(:,3);

TEAMTPM = data(:,4);

TEAMTPA = data(:,5);

TEAMFTM = data(:,6);

TEAMFTA = data(:,7);

TEAMORB = data(:,8);

TEAMDRB = data(:,9);

TEAMTRB = data(:,10);

TEAMAST = data(:,11);

TEAMSTL = data(:,12);

TEAMBLK = data(:,13);

TEAMTOV = data(:,14);

TEAMPF = data(:,15);

TEAMPTS = data(:,16);



%% Clear temporary variables

clearvars data raw;

%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/jonesyli/Desktop/RESET COMP.xlsx
%    Worksheet: Use this as Ind. Data
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2018/11/27 00:26:15

%% Import the data
[~, ~, RESETCOMP] = xlsread('/Users/owner/Math441NBAStuff/RESET COMP.xlsx','Use this as Ind. Data');
RESETCOMP = RESETCOMP(2:end,2);
RESETCOMP(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),RESETCOMP)) = {''};



PLAYER = [ones(1,282) 0];


INDPTS = [PTS' 0];

INDAST = [AST' 0];

INDTRB = [TRB' 0];

INDSTL = [STL' 0];

INDBLK = [BLK' 0];

INDFGA = [FGA' 0];

INDFGM = [FGM' 0];

INDTPA = [TPA' 0];

INDTPM = [TPM' 0];

INDFTA = [FTA' 0];

INDFTM = [FTM' 0];

INDPF = [PF' 0];

INDORB = [ORB' 0];

INDDRB = [DRB' 0];

INDPACE = [[PACE]'/13 0];

INDMIN = [MINUTES' 0];

INDTOV = [TOV' 0];

INDTS = [TS' 0];



MAXROSTER = 15;

MINROSTER = 13; 


Aeq = [];

beq = [];

lb = [zeros(1,283)];

ub = [ones(1,282) inf];


NEWVARREQ1 = [zeros(1,282) 1];

NEWVARREQ2 = [-TPM' 1];

names = [RESETCOMP; 'y'];

%    for alpha = [1:0.1:16];
       alpha = 0.01 ;

model.obj = [[Salary']/1000000 -alpha]

SSALARY = [[Salary]'/1000000 0]

model.A = sparse([-PLAYER; PLAYER; -INDMIN; -INDPTS; -INDAST; -INDORB; -INDDRB; -INDTRB; -INDSTL;
-INDBLK; INDTOV; INDPF; -INDFGM; -INDFGA; -INDTPA; -INDFTM; -INDFTA;
NEWVARREQ1; NEWVARREQ2]);

model.rhs =[-MINROSTER; MAXROSTER; -TEAMMIN; -TEAMPTS; -TEAMAST; -TEAMORB; -TEAMDRB;
-TEAMTRB; -TEAMSTL; -TEAMBLK; TEAMTOV; TEAMPF; -TEAMFGM; -TEAMFGA;
-TEAMTPA; -TEAMFTM; -TEAMFTA; TEAMTPM; 0];

model.sense = '<';
model.vtype = 'I';
model.modelsense = 'min';
model.varnames = names;
model.lb = lb;
model.ub = ub;


gurobi_write(model, 'nbatestrun.lp');

params.outputflag = 0;

result = gurobi(model,params);



disp(result);

for v=1:length(names)
      if (result.x(v) == 1)
      fprintf('%s %d \n', string(names(v)),result.x(v));
      end
end
  
disp('     ');

disp('The optimal solution is:');
disp(result.objval+ alpha * result.x(283));


disp('this is what the dummy variable y has!');
disp(result.x(283));

disp('this is the total penalty cost!');
disp(result.x(283) * alpha);

disp('this is before adding alpha!');
disp(result.objval);

disp('this is the objective value after adding alpha!');
disp(result.objval+ alpha * result.x(283));


  
      
   scatter(alpha, (result.objval+ alpha * result.x(283)));
   hold on
      
  end

%  end