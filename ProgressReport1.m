%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/jonesyli/Desktop/RESET COMP.xlsx
%    Worksheet: Use this as Ind. Data
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2018/11/21 11:31:38

%% Import the data
[~, ~, raw] = xlsread('/Users/jonesyli/Desktop/RESET COMP.xlsx','Use this as Ind. Data');
raw = raw(:,[3,6:end]);
raw(cellfun(@(x) ~isempty(x) && isnumeric(x) && isnan(x),raw)) = {''};

%% Exclude rows with non-numeric cells
I = ~all(cellfun(@(x) (isnumeric(x) || islogical(x)) && ~isnan(x),raw),2); % Find rows with non-numeric cells
raw(I,:) = [];

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Allocate imported array to column variable names
Salary = data(:,1);
MINUTES = data(:,2);
FGM = data(:,3);
FGA = data(:,4);
TPM = data(:,5);
TPA = data(:,6);
FTM = data(:,7);
FTA = data(:,8);
TOV = data(:,9);
PF = data(:,10);
ORB = data(:,11);
DRB = data(:,12);
TRB = data(:,13);
AST = data(:,14);
STL = data(:,15);
BLK = data(:,16);
PTS = data(:,17);
TS = data(:,18);
PACE = data(:,19);

%% Clear temporary variables
clearvars data raw I;

%% Import data from spreadsheet
% Script for importing data from the following spreadsheet:
%
%    Workbook: /Users/jonesyli/Desktop/RESET COMP.xlsx
%    Worksheet: Sheet1
%
% To extend the code for use with different selected data or a different
% spreadsheet, generate a function instead of a script.

% Auto-generated by MATLAB on 2018/11/21 11:34:25

%% Import the data
[~, ~, raw] = xlsread('/Users/jonesyli/Desktop/RESET COMP.xlsx','Sheet1');
raw = raw(195,3:end);

%% Create output variable
data = reshape([raw{:}],size(raw));

%% Allocate imported array to column variable names
TEAMMIN = data(:,1);
TEAMFGA = data(:,2);
TEAMFGM = data(:,3);
TEAMTPM = data(:,4);
TEAMTPA = data(:,5);
TEAMFTM = data(:,6);
TEAMFTA = data(:,7);
TEAMORB = data(:,8);
TEAMDRB = data(:,9);
TEAMTRB = data(:,10);
TEAMAST = data(:,11);
TEAMSTL = data(:,12);
TEAMBLK = data(:,13);
TEAMTOV = data(:,14);
TEAMPF = data(:,15);
TEAMPTS = data(:,16);

%% Clear temporary variables
clearvars data raw;


%% NEWLY ADDED CODES.
%Here, we are changing the values of the salary, by dividing everything by
%$1,000,000 (1 million dollars). This way, it is easier for us to read the
%answers, then multiply the final answer by $1 million dollars. 
%Also, we are adding an extra column towards the end. This extra (-1) is
%the addition of our extra variable, y. y is used to allow one of our
%constraints to undershoot the required constraints. 
% We will also set the function f as Salary. 

alpha = 1;
SALARY = [[Salary]'/1000000 -alpha];
f = SALARY;


%Here, we will create a matrix vector for players. This players Matrix will
%limit the amount of players we can select into our team. 
%The last column here is empty, because we are adding the extra variable,
%denoted as y. the variable y does not include any of the constraints,
%except for the last 2 lines of codes that are specifically for the
%advanced model. 

PLAYER = [ones(1,282) 0];

% Now, every single one of the constraints needs to be transposed, so we
% can actually match the LHS with the RHS. Also, we will add an extra 0
% towards the end of the matrix, because the extra variable y should not
% affect any of the other constraints. 

INDPTS = [PTS' 0];
INDAST = [AST' 0];
INDTRB = [TRB' 0];
INDSTL = [STL' 0];
INDBLK = [BLK' 0];
INDFGA = [FGA' 0];
INDFGM = [FGM' 0];
INDTPA = [TPA' 0];
INDTPM = [TPM' 0];
INDFTA = [FTA' 0];
INDFTM = [FTM' 0];
INDPF = [PF' 0];
INDORB = [ORB' 0];
INDDRB = [DRB' 0];
INDPACE = [[PACE]'/13 0];
INDMIN = [MINUTES' 0];
INDTOV = [TOV' 0];
INDTS = [TS' 0];

% After transposing everything, and adding the addition variable, we will
% now include all the row matrixes together, to form our Constraint Matrix,
% A.
% However, since intlinprog only takes in Ax <= b, for our program, we would
% need to flip some of the constraints, in order to make it satisfy our
% needs. 

A = [-PLAYER; PLAYER; INDMIN; -INDPTS; -INDAST; -INDORB; -INDDRB; -INDTRB; -INDSTL;
    -INDBLK; INDTOV; INDPF; -INDFGM; -INDFGA; -INDTPM; -INDTPA; -INDFTM; -INDFTA;
    ];

% Now, we will make our b vector for the linear program. Here, we will have
% to flip some of the values to match our A matrix. 

MAXROSTER = 15;
MINROSTER = 13; 

b = [-MINROSTER; MAXROSTER; TEAMMIN; -TEAMPTS; -TEAMAST; -TEAMORB; -TEAMDRB;
    -TEAMTRB; -TEAMSTL; -TEAMBLK; TEAMTOV; TEAMPF; -TEAMFGM; -TEAMFGA;
    -TEAMTPM; -TEAMTPA; -TEAMFTM; -TEAMFTA]; 

Aeq = [];
beq = [];
lb = [zeros(1,283)];
ub = [ones(1,282) inf];

%this line shows which variables needs linear conditions. So here, all 282
%original variables needs to satisfy integer condition, while the new
%variable y does not. the bound for y would be (0, inf).
intcon = [1:282]

% Here, we will now need to consider the constraints for our new variable
% y. Since we know that y is taken as the minimum of either the constraints
% requirement, b_k, or the sum of the constraint equation
% a_k1x_1+...+a_knx_n, then we would have to add 2 new constraint equations
% onto A. 

NEWVARREQ1 = [zeros(1,282) 1];
NEWVARREQ2 = [-TPM' 1];

A = [-PLAYER; PLAYER; -INDMIN; -INDPTS; -INDAST; -INDORB; -INDDRB; -INDTRB; -INDSTL;
    -INDBLK; -INDTOV; INDPF; -INDFGM; -INDFGA; -INDTPM; -INDTPA; -INDFTM; -INDFTA;
    NEWVARREQ1; NEWVARREQ2];

% This also means, we would need to update our vector b as well. 

b = [-MINROSTER; MAXROSTER; -TEAMMIN; -TEAMPTS; -TEAMAST; -TEAMORB; -TEAMDRB;
    -TEAMTRB; -TEAMSTL; -TEAMBLK; -TEAMTOV; TEAMPF; -TEAMFGM; -TEAMFGA;
    -TEAMTPM; -TEAMTPA; -TEAMFTM; -TEAMFTA; TEAMTPM; 0]; 

% Now, we will put all the pieces together first, and see whether the
% program will run or not. 


[X, fval, exitflag, output] = intlinprog(f, intcon, A, b, Aeq, beq, lb, ub)

k = find(X == 1);
y = X(283);

finalvalue = fval + alpha * TEAMTPM';